# -*- coding: utf-8 -*-
"""house_and_homely_streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1is0CydLtQK3LJsJ2jUwkLjO7W_a3BBER
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Set up Streamlit page configuration
st.set_page_config(page_title="Customer Segmentation Analysis", page_icon=":bar_chart:", layout="wide")

# Style settings for green, black, and white theme
st.markdown(
    """
    <style>
    .reportview-container {
        background: white;
    }
    .sidebar .sidebar-content {
        background: #f0f2f6;
    }
    .css-1aumxhk {
        background-color: #0a0a0a;
    }
    .css-12w0qpk {
        color: white;
        font-size: 20px;
    }
    .css-16huue1 {
        color: #0f9d58;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Load customer data (replace with your actual data source)
@st.cache
def load_data():
    num_customers = 500
    np.random.seed(42)
    customer_ids = range(1, num_customers + 1)
    ages = np.random.randint(18, 70, size=num_customers)
    genders = np.random.choice(['Male', 'Female'], size=num_customers)
    locations = np.random.choice(['Urban', 'Suburban', 'Rural'], size=num_customers)
    purchase_frequency = np.random.poisson(5, size=num_customers)
    avg_order_value = np.random.normal(50, 20, size=num_customers).clip(10, 200)
    last_purchase_days = np.random.randint(1, 365, size=num_customers)
    product_variety = np.random.randint(1, 15, size=num_customers)

    customer_data = pd.DataFrame({
        'CustomerID': customer_ids,
        'Age': ages,
        'Gender': genders,
        'Location': locations,
        'PurchaseFrequency': purchase_frequency,
        'AvgOrderValue': avg_order_value,
        'DaysSinceLastPurchase': last_purchase_days,
        'ProductVariety': product_variety
    })
    return customer_data

customer_data = load_data()

# Data Preparation and Normalization
features = ['Age', 'PurchaseFrequency', 'AvgOrderValue', 'DaysSinceLastPurchase', 'ProductVariety']
scaler = StandardScaler()
scaled_features = scaler.fit_transform(customer_data[features])
scaled_customer_data = pd.DataFrame(scaled_features, columns=features)

# Sidebar for K-means Clustering parameters
st.sidebar.header("K-means Clustering Settings")
optimal_k = st.sidebar.slider("Number of Clusters (k)", 2, 10, 4)

# K-means clustering
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
customer_data['Cluster'] = kmeans.fit_predict(scaled_customer_data)

# Main Dashboard
st.title("Customer Segmentation Analysis")
st.write("This dashboard provides insights into different customer segments based on their purchasing behaviors and demographics.")

# Display the data
st.subheader("Customer Data")
st.dataframe(customer_data.head())

# Visualize Clusters
st.subheader("Cluster Distribution")
fig, ax = plt.subplots()
sns.countplot(x='Cluster', data=customer_data, palette=['#0f9d58', '#ffffff', '#0a0a0a'])
plt.title('Number of Customers in Each Cluster')
plt.xlabel('Cluster')
plt.ylabel('Number of Customers')
st.pyplot(fig)

# Cluster Characteristics
st.subheader("Cluster Characteristics")
cluster_summary = customer_data.groupby('Cluster').mean()
st.write(cluster_summary)

# Boxplots by cluster
st.subheader("Boxplot of Features by Cluster")
fig, axs = plt.subplots(2, 3, figsize=(12, 8))
for i, column in enumerate(features):
    sns.boxplot(x='Cluster', y=column, data=customer_data, ax=axs[i//3, i%3], palette=['#0f9d58', '#ffffff', '#0a0a0a'])
    axs[i//3, i%3].set_title(f'{column} by Cluster')
plt.tight_layout()
st.pyplot(fig)

# Scatter Plot for Cluster Distribution
st.subheader("Scatter Plot of Customer Segments")
fig, ax = plt.subplots(figsize=(10, 6))
scatter = sns.scatterplot(x='PurchaseFrequency', y='AvgOrderValue', hue='Cluster', data=customer_data, palette=['#0f9d58', '#ffffff', '#0a0a0a'])
plt.title('Purchase Frequency vs. Avg Order Value by Cluster')
plt.xlabel('Purchase Frequency')
plt.ylabel('Avg Order Value')
plt.legend(loc='upper right')
st.pyplot(fig)

# Correlation Heatmap
st.subheader("Correlation Heatmap")
fig, ax = plt.subplots(figsize=(8, 6))
sns.heatmap(customer_data[features].corr(), annot=True, cmap='coolwarm')
plt.title('Feature Correlation Heatmap')
st.pyplot(fig)

# Cluster Centers Plot
st.subheader("Cluster Centers Plot")
fig, ax = plt.subplots(figsize=(8, 6))
cluster_centers = pd.DataFrame(scaler.inverse_transform(kmeans.cluster_centers_), columns=features)
sns.heatmap(cluster_centers, annot=True, cmap='Greens')
plt.title('Cluster Centers of Scaled Features')
st.pyplot(fig)

# Pie Chart of Customer Segmentation Breakdown
st.subheader("Customer Segmentation Breakdown")
fig, ax = plt.subplots()
cluster_counts = customer_data['Cluster'].value_counts()
ax.pie(cluster_counts, labels=cluster_counts.index, autopct='%1.1f%%', colors=['#0f9d58', '#ffffff', '#0a0a0a'], startangle=140)
plt.axis('equal')
plt.title('Proportion of Customers in Each Cluster')
st.pyplot(fig)

# Distribution Histograms of Features
st.subheader("Distribution of Features within Each Cluster")
fig, axs = plt.subplots(2, 3, figsize=(12, 8))
for i, column in enumerate(features):
    for cluster in range(optimal_k):
        sns.histplot(customer_data[customer_data['Cluster'] == cluster][column], kde=True, ax=axs[i//3, i%3], label=f'Cluster {cluster}', color=['#0f9d58', '#ffffff', '#0a0a0a'][cluster % 3])
    axs[i//3, i%3].set_title(f'{column} Distribution by Cluster')
    axs[i//3, i%3].legend()
plt.tight_layout()
st.pyplot(fig)

st.sidebar.write("Use the slider above to change the number of clusters.")
st.sidebar.write("This dashboard uses a green, black, and white theme for visual consistency.")